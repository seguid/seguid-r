on:
  push:
    paths:
      - 'Python/**/*'
      - .github/workflows/check-python.yml
  pull_request:
    paths:
      - 'Python/**/*'
      - .github/workflows/check-python.yml

name: "Python checks"

permissions:
  contents: read

jobs:
  check:
    if: "! contains(github.event.head_commit.message, '[ci skip]')"

    timeout-minutes: 10

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Install this Python package
      run: |
        cd Python/
        pip install .
        
    - name: Session information
      run: |
        python --version

    - name: Lint with flake8
      run: |
        cd Python/
        flake8 --version
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        
    - name: Test with pytest
      run: |
        cd Python/
        pytest
          
    - name: Generate coverage report
      run: |
        pip install pytest-cov
        cd Python/
        pytest --cov=src/ ## output summarize in GitHub logs
        pytest --cov=src/ --cov-report=xml
        
    - name: Upload Coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        directory: Python/
        env_vars: OS,PYTHON
        files: coverage.xml
        fail_ci_if_error: true
        flags: unittests
        name: codecov-umbrella
        verbose: true

    - name: Check CLI
      if: runner.os != 'Windows'
      run: |
        cd Python
        curl -L -O https://github.com/bats-core/bats-core/archive/refs/tags/v1.10.0.tar.gz && tar xf v1.10.0.tar.gz
        curl -L -O https://github.com/bats-core/bats-support/archive/refs/tags/v0.3.0.tar.gz && tar xf v0.3.0.tar.gz
        curl -L -O https://github.com/bats-core/bats-assert/archive/refs/tags/v2.1.0.tar.gz && tar xf v2.1.0.tar.gz
        export BATS_SUPPORT_HOME=$PWD/bats-support-0.3.0
        export BATS_ASSERT_HOME=$PWD/bats-assert-2.1.0
        export PATH=$PWD/bats-core-1.10.0/bin:$PATH
        bash --version
        bats --version
        (cd tests/; bats *.bats)
